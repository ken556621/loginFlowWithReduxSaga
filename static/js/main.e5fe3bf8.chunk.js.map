{"version":3,"sources":["components/Home/Home.js","components/Public/Public.js","components/Login/SignInForm.js","components/actions/Constants.js","components/actions/UserAction.js","components/shared/MyButton.js","components/Login/Login.js","components/Protected/Protected.js","components/routes.js","components/shared/Auth.js","components/AppContainer.js","components/reducers/login.reducer.js","components/reducers/all.reducer.js","sagas/loginSaga.js","sagas/rootSaga.js","store/configStore.js","serviceWorker.js","index.js"],"names":["Home","authenticated","this","props","to","Component","connect","store","user","authenticating","Public","FormGroup","styled","div","Input","input","Error","SignInForm","handleChange","e","target","name","value","setState","emptyUserName","userName","emptyPassword","password","handleSubmit","state","dispatch","history","trim","invalid","type","cb","redirect","logInRequest","push","handleKeyDown","key","handleCancel","closeSignInForm","onClose","Header","Title","Body","onChange","placeholder","onKeyDown","Footer","onClick","btnStyle","disabled","MyButton","text","Login","showSignInForm","isSignInForm","Protected","handleSignOut","path","component","ComposedClass","Auth","console","log","createBrowserHistory","AppContainer","Routes","initiaState","formState","errorMsg","loginReducer","action","allReducers","combineReducers","authorize","logInFlow","watchLogInRequest","loginAPI","a","fetchData","Promise","resolve","reject","setTimeout","response","call","put","fork","task","take","cancel","takeLatest","rootSaga","all","sagaMiddleware","createSagaMiddleware","createStore","composeWithDevTools","applyMiddleware","run","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","Store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e5fe3bf8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from \"react-redux\";\n\n\nclass Home extends Component {\n    render() { \n        const { authenticated } = this.props;\n        return ( \n            <div>\n                <h1>\n                    { authenticated ? \"Welcome!\" : \"You are not signed in!\" }\n                </h1>\n                <ul>\n                    <li>\n                        <Link to = '/public'>\n                            Public Page\n                        </Link>\n                    </li>\n                    <li>\n                        <Link to = '/protected'>\n                            Protected Page\n                        </Link>\n                    </li>\n                </ul>\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(store){\n    return {\n        authenticated: store.user.authenticated,\n        authenticating: store.user.authenticating\n    }\n}\n\nexport default connect(mapStateToProps)(Home);","import React, { Component } from 'react';\n\nimport Home from '../Home/Home';\n\nclass Public extends Component {\n    render() { \n        return (  \n           <>\n            <Home />\n            <h3>\n                Public\n            </h3>\n           </> \n        );\n    }\n}\n \nexport default Public;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { LOGIN_FAIL, LOGIN_CANCEL } from '../actions/Constants';\nimport { logInRequest } from '../actions/UserAction';\nimport styled from 'styled-components';\nimport Modal from '@trendmicro/react-modal';\nimport { Button } from '@trendmicro/react-buttons';\n\nimport '@trendmicro/react-modal/dist/react-modal.css';\nimport '@trendmicro/react-buttons/dist/react-buttons.css';\n\nconst FormGroup = styled.div`\n    margin-bottom: 8px;\n`;\n\nconst Input = styled.input`\n    display: inline-block;\n    width: 100%;\n    padding: 5px 12px;\n    font-size: 13px;\n    color: #222222;\n    background-color: #ffffff;\n    background-image: none;\n    border: 1px solid #cccccc;\n    border-radius: 3px;\n`;\n\nconst Error = styled.div`\n    display: block;\n    color: #db3d44;\n    margin-top: 4px;\n`;\n\nclass SignInForm extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            userName: \"\",\n            password: \"\",\n            emptyUserName: false,\n            emptyPassword: false,\n            invalid: false\n        }\n    }\n\n    handleChange = (e) => {\n        if(e.target.name === \"userName\"){\n            if(e.target.value === \"\"){\n                this.setState({\n                    emptyUserName: true\n                })\n            }else{\n                this.setState({\n                    emptyUserName: false\n                })\n            }\n            this.setState({\n                userName: e.target.value\n            })\n        }else if(e.target.name === \"password\"){\n            if(e.target.value === \"\"){\n                this.setState({\n                    emptyPassword: true\n                })\n            }else{\n                this.setState({\n                    emptyPassword: false\n                })\n            }\n            this.setState({\n                password: e.target.value\n            })\n        }\n    }\n\n    handleSubmit = () => {\n        const { userName, password } = this.state;\n        const { dispatch, history } = this.props;\n        if(userName.trim() !== \"guest\"){\n            this.setState({\n                invalid: true\n            })\n            dispatch({ type: LOGIN_FAIL })\n            return\n        }\n        if(password.trim() !== \"guest\"){\n            this.setState({\n                invalid: true\n            })\n            dispatch({ type: LOGIN_FAIL })\n            return\n        }\n        dispatch(logInRequest(userName, password, () => history.push(\"/protected\")));\n    } \n\n    handleKeyDown = (e) => {\n        if (e.key === 'Enter') {\n            this.handleSubmit()\n        }\n    }\n\n    handleCancel = () => {\n        const { closeSignInForm, dispatch } = this.props;\n        dispatch({ type: LOGIN_CANCEL });\n        closeSignInForm();\n    }\n\n    render() { \n        const { emptyUserName, emptyPassword, invalid } = this.state;\n        return ( \n            <Modal onClose={ this.handleCancel }>\n                <Modal.Header>\n                    <Modal.Title>\n                        Sign In\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <FormGroup>\n                        <label>Username</label>\n                        <div>\n                            <Input onChange={ this.handleChange } name=\"userName\" type=\"text\" placeholder=\"Enter username\" />\n                        </div>\n                    </FormGroup>\n                    { emptyUserName ? <Error>This is required field!</Error> : null }\n                    <FormGroup>\n                        <label>Password</label>\n                        <div>\n                            <Input onChange={ this.handleChange } onKeyDown = { this.handleKeyDown } name=\"password\" type=\"password\" placeholder=\"Enter password\" />\n                        </div>\n                    </FormGroup>\n                    { emptyPassword ? <Error>This is required field!</Error> : null }\n                    { invalid ? <Error>Incorrect username or password.</Error> : null }\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button onClick = { this.handleCancel } btnStyle=\"flat\">\n                        Cancel\n                    </Button>\n                    { emptyUserName || emptyPassword ?\n                        <Button onClick = { this.handleSubmit } disabled btnStyle=\"primary\">\n                            Sign In\n                        </Button> :\n                        <Button onClick = { this.handleSubmit } btnStyle=\"primary\">\n                            Sign In\n                        </Button> \n                    }\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n\nfunction mapStateToProps(store){\n    return {\n        authenticated: store.user.authenticated,\n        authenticating: store.user.authenticating\n    }\n}\n \nexport default connect(mapStateToProps)(SignInForm);","export const LOGIN_REQUEST = 'LOGIN_REQUEST'\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS'\nexport const UPDATE_USER = 'UPDATE_USER'\nexport const LOGIN_FAIL = 'LOGIN_FAIL'\nexport const LOGIN_ERROR = 'LOGIN_ERROR'\nexport const LOGOUT = 'LOGOUT'\nexport const LOGIN_CANCEL = 'LOGIN_CANCEL'","export function logInRequest(userName, password, cb){\n    return {\n        type: \"LOGIN_REQUEST\",\n        userName,\n        password,\n        redirect: cb\n    }\n}\n\nexport function logInSuccess(){\n    return {\n        type: \"LOGIN_SUCCESS\"\n    }\n}\n\nexport function logInFail(){\n    return {\n        type: \"LOGIN_FAIL\"\n    }\n}\n\nexport function logInError(){\n    return {\n        type: \"LOGIN_ERROR\"\n    }\n}\n\nexport function logOut(){\n    return {\n        type: \"LOGOUT\"\n    }\n}","import React from 'react';\n\nconst MyButton = function({ text, cb }){\n    return(\n        <button onClick = { cb }>\n            { text }\n        </button>\n    )\n};\n\nexport default MyButton;\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport Home from '../Home/Home';\nimport SignInForm from './SignInForm';\nimport Button from '../shared/MyButton';\n\nclass Login extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            isSignInForm: false\n        }\n    }\n\n    showSignInForm = () => {\n        this.setState({\n            isSignInForm: true\n        })\n    }\n\n    closeSignInForm = () => {\n        this.setState({\n            isSignInForm: false\n        })\n    }\n\n    render() { \n        const { isSignInForm } = this.state;\n        const { history } = this.props;\n        return ( \n            <>\n                { isSignInForm ? <SignInForm closeSignInForm = { this.closeSignInForm } history = { history } /> :\n                    <>\n                        <Home />\n                        <h3>\n                            You must sign in to view the page at/protected\n                        </h3>\n                        <Button text = { \"Sign In\" } cb = { this.showSignInForm } />\n                    </>\n                }\n            </>\n        );\n    }\n}\n\nfunction mapStateToProps(store){\n    return {\n        authenticated: store.user.authenticated,\n        authenticating: store.user.authenticating\n    }\n}\n\nexport default connect(mapStateToProps)(Login);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { LOGOUT } from '../actions/Constants';\nimport Mybutton from '../shared/MyButton'; \n\nimport Home from '../Home/Home';\n\nclass Protected extends Component {\n    handleSignOut = () => {\n        const { dispatch, history } = this.props;\n        dispatch({ type: LOGOUT });\n        history.push(\"/\");\n    }\n\n    render() { \n        return ( \n            <>\n                <Mybutton text = { \"Sign Out\" } cb = { this.handleSignOut }/>\n                <Home />\n                <h3>\n                    Protected\n                </h3>\n            </>\n        );\n    }\n}\n\nfunction mapStateToProps(store){\n    return {\n        authenticated: store.user.authenticated,\n        authenticating: store.user.authenticating\n    }\n}\n \nexport default connect(mapStateToProps)(Protected);","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport Home from './Home/Home';\nimport Public from './Public/Public';\nimport Login from './Login/Login';\nimport Protected from './Protected/Protected';\nimport Auth from './shared/Auth';\n\nexport default (\n    <Switch>\n        <Route path = '/public' component={ Public } />\n        <Route path = '/login' component={ Login } />\n        <Route path = '/protected' component={ Auth(Protected) } />\n        <Route path = '/' component={ Home } />\n    </Switch>  \n)","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nexport default function(ComposedClass){\n    class Auth extends Component {\n        componentDidMount(){\n            const { authenticated, authenticating, history } = this.props;\n            if(!authenticating){\n                if(authenticated){\n                    console.log(\"Login\")\n                }else{\n                    history.push(\"/login\")\n                }\n            }else{\n                if(!authenticated){\n                    history.push(\"/login\")\n                }\n            }\n        }\n  \n        render() {\n            const { authenticated, authenticating } = this.props;\n            if(authenticating) {\n                return <h1>Is loading</h1>\n            }else{\n                if(authenticated) {\n                    return <ComposedClass {...this.props}/>\n                }else{\n                    return <div></div>\n                }\n \n            }\n        }\n    }\n  \n    function mapStateToProps(store) {\n        return {\n            authenticating: store.user.authenticating,\n            authenticated: store.user.authenticated\n        };\n    }\n\n    return connect(mapStateToProps)(Auth);\n}","import React, { Component } from 'react';\nimport { Router } from \"react-router-dom\";\nimport { createBrowserHistory } from \"history\";\n\nimport Routes from './routes';\nimport './shared/global.css';\n\nconst history = createBrowserHistory();\n\nclass AppContainer extends Component {\n    render() { \n        return ( \n            <Router history = { history }>\n                { Routes }\n            </Router>\n        );\n    }\n}\n \nexport default AppContainer;","const initiaState = {\n    authenticated: false,\n    authenticating: false,\n    formState: {\n        userName: \"\",\n        password: \"\"\n    },\n    errorMsg: \"\"\n}\n\nconst loginReducer = (state = initiaState, action) => {\n    switch (action.type){\n        case \"LOGIN_REQUEST_ASYNC\":\n            return {\n                ...state, \n                authenticating: true,\n                authenticated: false\n            }\n        case \"LOGIN_SUCCESS\":\n            return {\n                ...state, \n                authenticating: false,\n                authenticated: true\n            }\n        case \"UPDATE_USER\":\n            return {\n                ...state, \n                authenticating: false,\n                authenticated: true,\n                formState: {\n                    userName: action.userName,\n                    password: action.password\n                }\n            }\n        case \"LOGIN_FAIL\":\n            return {\n                ...state,\n                authenticating: false,\n                authenticated: false,\n                errorMsg: \"Login Fail\"\n            }\n        case \"LOGOUT\":\n            return {\n                ...state,\n                authenticating: false,\n                authenticated: false\n            }\n        case \"LOGIN_ERROR\":\n            return {\n                ...state,\n                authenticating: false,\n                authenticated: false,\n                errorMsg: \"Login Error\"\n            }\n        default :\n            return state\n    }\n}\n\nexport default loginReducer;","import { combineReducers } from 'redux';\nimport loginReducer from './login.reducer';\n\nconst allReducers = combineReducers({\n    user: loginReducer\n})\n\nexport default allReducers;","import { take, takeLatest, all, put, call, fork, cancel } from 'redux-saga/effects';\nimport { LOGIN_REQUEST, LOGIN_SUCCESS, UPDATE_USER, LOGIN_ERROR, LOGIN_CANCEL } from '../components/actions/Constants';\n\nasync function loginAPI(){\n    const fetchData = new Promise((resolve, reject) => {\n        setTimeout(() => {\n            resolve(\"Finish checking\")\n        }, 4000)\n    })\n    const response = await fetchData;\n    return response;\n}\n\nexport function* authorize({userName, password, redirect}){\n    try {\n        yield call(loginAPI)\n        yield put({ type: LOGIN_SUCCESS });\n        yield put({ type: UPDATE_USER, userName, password });\n        yield call(function(){ \n            redirect() \n        }); \n    } catch (error) {\n        yield put({ type: LOGIN_ERROR })\n    }\n}\n\nexport function* logInFlow(action){\n    try {\n        const task = yield fork(authorize, { \n            userName: action.userName,\n            password: action.password,\n            redirect: action.redirect \n        }); \n        yield take(LOGIN_CANCEL);\n        yield cancel(task);\n    }catch(error) {\n        yield put({ type: LOGIN_ERROR });\n    }\n}\n\nexport function* watchLogInRequest(){\n    yield takeLatest(LOGIN_REQUEST, logInFlow)\n}","import { all } from 'redux-saga/effects';\nimport { watchLogInRequest } from './loginSaga';\n\nexport default function* rootSaga() {\n    yield all([\n        watchLogInRequest()\n    ])\n}","import { applyMiddleware, createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport createSagaMiddleware from 'redux-saga'\n\nimport allReducers from \"../components/reducers/all.reducer\";\nimport rootSaga from '../sagas/rootSaga';\n\nconst sagaMiddleware = createSagaMiddleware()\nconst initiaState = {};\n\nconst store = createStore(\n    allReducers,\n    initiaState,\n    composeWithDevTools(\n      applyMiddleware(sagaMiddleware)\n    )\n  );\n  \nsagaMiddleware.run(rootSaga);\n\nexport default store;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport AppContainer from './components/AppContainer';\nimport Store from './store/configStore';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store = { Store }>\n      <AppContainer />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}